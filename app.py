import gradio as gr
import os
import pytesseract
from PIL import Image
from openai import OpenAI
from dotenv import load_dotenv
import fitz  # PyMuPDF
import docx  # python-docx

# Load OpenAI key
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Extract text from various file types
def extract_text_from_file(file):
    if file is None:
        return ""
    name = file.name.lower()

    try:
        if name.endswith(".pdf"):
            doc = fitz.open(file.name)
            text = "\n".join([page.get_text() for page in doc])
            print("üìÑ Extracted PDF text:", text[:500])
            return text

        elif name.endswith(".docx"):
            doc = docx.Document(file.name)
            text = "\n".join([para.text for para in doc.paragraphs])
            print("üìù Extracted DOCX text:", text[:500])
            return text

        elif name.endswith((".png", ".jpg", ".jpeg")):
            image = Image.open(file.name)
            text = pytesseract.image_to_string(image)
            print("üñºÔ∏è Extracted image text:", text[:500])
            return text

        else:
            print("‚ùå Unsupported file type")
            return "Unsupported file type."

    except Exception as e:
        print("‚ö†Ô∏è Error reading file:", e)
        return f"Failed to read file: {e}"

# Chat logic
def chatbot_respond(user_message, history, uploaded_file):
    file_text = extract_text_from_file(uploaded_file)

    system_prompt = f"""
    You are an expert immigration legal assistant. Your role is to provide clear, accurate, and conservative immigration-related advice for users in the United States.

    Guidelines:
    - Respond in the user's language (English or Spanish).
    - If unsure, say you don't know and recommend contacting a lawyer.
    - NEVER guess or provide speculative advice.
    - Escalate if criminal issues, deportation, detention, or legal deadlines are involved.

    Below is text extracted from a document the user uploaded. Use it to answer their questions ‚Äî including vague ones like "what is this document about?":
    -----
    {file_text[:2000]}
    -----
    """

    messages = [{"role": "system", "content": system_prompt}]
    for user, assistant in history:
        messages.append({"role": "user", "content": user})
        messages.append({"role": "assistant", "content": assistant})
    messages.append({"role": "user", "content": user_message})

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.0
        )
        reply = response.choices[0].message.content
        return reply
    except Exception as e:
        return f"‚ùå Error: {str(e)}"

# Build Gradio Blocks UI
with gr.Blocks() as demo:
    gr.Markdown("# üß≠ Immigration AI Chatbot")
    gr.Markdown("""
### ‚ö†Ô∏è Disclaimer

This chatbot is intended **for informational and educational purposes only**. It does **not provide legal advice**, and **no attorney-client relationship** is formed by using this service.

The responses generated by this AI are based on general patterns in publicly available information and may **not reflect the most current legal standards**. You should **not rely on this chatbot for decisions involving your legal rights, immigration status, or deadlines**.

Always consult with a **licensed immigration attorney** for professional legal advice tailored to your specific situation.

By using this service, you acknowledge and agree that:
- The chatbot is **not a substitute for legal counsel**.
- You use the information provided **at your own risk**.
- **Uploaded files are processed temporarily** and are **not stored or reviewed by humans**.
""")


    chatbot = gr.Chatbot(label="Immigration Law Chatbot")
    msg = gr.Textbox(label="Your question", placeholder="Ask a question about your immigration situation or uploaded document...")
    state = gr.State([])
    file_input = gr.File(label="Upload a PDF, DOCX, or image", file_types=[".pdf", ".docx", ".png", ".jpg", ".jpeg"])


    def respond(message, history, file):
        response = chatbot_respond(message, history, file)
        history.append((message, response))
        return history, history

    msg.submit(respond, [msg, state, file_input], [chatbot, state])

demo.launch()
